// Code generated by protok protocol buffer plugin, do not edit.
// Source file: map.proto
package api

import java.io.Serializable
import jp.co.panpanini.Marshaller
import jp.co.panpanini.Message
import jp.co.panpanini.UnknownField
import jp.co.panpanini.Unmarshaller
import kotlin.ByteArray
import kotlin.Int
import kotlin.String
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic

data class Mappy(
    @JvmField val id: String = "",
    @JvmField val things: Map<String, api.Thing> = emptyMap(),
    @JvmField val otherThings: Map<String, Int> = emptyMap(),
    @JvmField val thingList: List<api.Thing> = emptyList(),
    val unknownFields: Map<Int, UnknownField> = emptyMap()
) : Message<Mappy>, Serializable {
    override val protoSize: Int = protoSizeImpl()


    constructor(
        id: String,
        things: Map<String, api.Thing>,
        otherThings: Map<String, Int>,
        thingList: List<api.Thing>
    ) : this(id, things, otherThings, thingList, emptyMap())

    override fun toJson() = """
    { 
    "id" : "${id}", 
    "things" : { ${things.entries.joinToString(", ") { (k, v) ->"$k : ${v.toJson()}" } } }, 
    "otherThings" : { ${otherThings.entries.joinToString(", ") { (k, v) ->"$k : ${v.toString()}" } } },
            
    "thingList" : [ ${ thingList.joinToString(", ") { it.toJson() } } ]
    }
    """.trimIndent()
    fun Mappy.protoSizeImpl(): Int {
        var protoSize = 0
        if (id != DEFAULT_ID) {
            protoSize += jp.co.panpanini.Sizer.tagSize(1) + jp.co.panpanini.Sizer.stringSize(id)
        }
        if (things.isNotEmpty()) {
            protoSize += jp.co.panpanini.Sizer.mapSize(2, things, api.Mappy::ThingsEntry)
        }
        if (otherThings.isNotEmpty()) {
            protoSize += jp.co.panpanini.Sizer.mapSize(3, otherThings, api.Mappy::OtherThingsEntry)
        }
        if (thingList.isNotEmpty()) {
            protoSize += jp.co.panpanini.Sizer.tagSize(4) * thingList.size +
                    thingList.sumBy(jp.co.panpanini.Sizer::messageSize)
        }
        protoSize += unknownFields.entries.sumBy { it.value.size() }
        return protoSize
    }

    fun Mappy.protoMarshalImpl(protoMarshal: Marshaller) {
        if (id != DEFAULT_ID) {
            protoMarshal.writeTag(10).writeString(id)

        }
        if (things.isNotEmpty()) {
            protoMarshal.writeMap(18, things, api.Mappy::ThingsEntry)

        }
        if (otherThings.isNotEmpty()) {
            protoMarshal.writeMap(26, otherThings, api.Mappy::OtherThingsEntry)

        }
        if (thingList.isNotEmpty()) {
            thingList.forEach { protoMarshal.writeTag(34).writeMessage(it) }

        }
        if (unknownFields.isNotEmpty()) {
            protoMarshal.writeUnknownFields(unknownFields)
        }
    }

    fun Mappy.protoMergeImpl(other: Mappy?): Mappy = other?.copy(
        things = things + other.things,
        otherThings = otherThings + other.otherThings,
        thingList = thingList + other.thingList,
        unknownFields = unknownFields + other.unknownFields
    ) ?: this

    override fun protoMarshal(marshaller: Marshaller) = protoMarshalImpl(marshaller)

    override operator fun plus(other: Mappy?): Mappy = protoMergeImpl(other)

    fun encode(): ByteArray = protoMarshal()

    override fun protoUnmarshal(protoUnmarshal: Unmarshaller): Mappy =
            Companion.protoUnmarshal(protoUnmarshal)

    fun newBuilder(): Builder = Builder()
        .id(id)
        .things(things)
        .otherThings(otherThings)
        .thingList(thingList)
        .unknownFields(unknownFields)

    data class ThingsEntry(
        override val key: String,
        override val value: api.Thing,
        val unknownFields: Map<Int, UnknownField> = emptyMap()
    ) : Message<ThingsEntry>, Serializable, Map.Entry<String, api.Thing> {
        override val protoSize: Int = protoSizeImpl()


        constructor(key: String, value: api.Thing) : this(key, value, emptyMap())

        override fun toJson() = """
        { 
        "key" : "${key}", 
        "value" : "${value.toJson()}"
        }
        """.trimIndent()
        fun ThingsEntry.protoSizeImpl(): Int {
            var protoSize = 0
            if (key != DEFAULT_KEY) {
                protoSize += jp.co.panpanini.Sizer.tagSize(1) +
                        jp.co.panpanini.Sizer.stringSize(key)
            }
            if (value != DEFAULT_VALUE) {
                protoSize += jp.co.panpanini.Sizer.tagSize(2) +
                        jp.co.panpanini.Sizer.messageSize(value)
            }
            protoSize += unknownFields.entries.sumBy { it.value.size() }
            return protoSize
        }

        fun ThingsEntry.protoMarshalImpl(protoMarshal: Marshaller) {
            if (key != DEFAULT_KEY) {
                protoMarshal.writeTag(10).writeString(key)

            }
            if (value != DEFAULT_VALUE) {
                protoMarshal.writeTag(18).writeMessage(value)

            }
            if (unknownFields.isNotEmpty()) {
                protoMarshal.writeUnknownFields(unknownFields)
            }
        }

        fun ThingsEntry.protoMergeImpl(other: ThingsEntry?): ThingsEntry = other?.copy(
            value = value?.plus(other.value) ?: value,
            unknownFields = unknownFields + other.unknownFields
        ) ?: this

        override fun protoMarshal(marshaller: Marshaller) = protoMarshalImpl(marshaller)

        override operator fun plus(other: ThingsEntry?): ThingsEntry = protoMergeImpl(other)

        fun encode(): ByteArray = protoMarshal()

        override fun protoUnmarshal(protoUnmarshal: Unmarshaller): ThingsEntry =
                Companion.protoUnmarshal(protoUnmarshal)

        companion object : Message.Companion<ThingsEntry> {
            @JvmField
            val DEFAULT_KEY: String = ""

            @JvmField
            val DEFAULT_VALUE: api.Thing = api.Thing()

            override fun protoUnmarshal(protoUnmarshal: Unmarshaller): ThingsEntry {
                var key = ""
                var value: api.Thing = api.Thing()
                while (true) {
                    when (protoUnmarshal.readTag()) {
                        0 -> return ThingsEntry(key, value, protoUnmarshal.unknownFields())
                        10 -> key = protoUnmarshal.readString()
                        18 -> value = protoUnmarshal.readMessage(api.Thing.Companion)
                        else -> protoUnmarshal.unknownField()
                    }
                }
            }

            @JvmStatic
            fun decode(arr: ByteArray): ThingsEntry = protoUnmarshal(arr)
        }
    }

    data class OtherThingsEntry(
        override val key: String,
        override val value: Int,
        val unknownFields: Map<Int, UnknownField> = emptyMap()
    ) : Message<OtherThingsEntry>, Serializable, Map.Entry<String, Int> {
        override val protoSize: Int = protoSizeImpl()


        constructor(key: String, value: Int) : this(key, value, emptyMap())

        override fun toJson() = """
        { 
        "key" : "${key}", 
        "value" : "${value.toString()}"
        }
        """.trimIndent()
        fun OtherThingsEntry.protoSizeImpl(): Int {
            var protoSize = 0
            if (key != DEFAULT_KEY) {
                protoSize += jp.co.panpanini.Sizer.tagSize(1) +
                        jp.co.panpanini.Sizer.stringSize(key)
            }
            if (value != DEFAULT_VALUE) {
                protoSize += jp.co.panpanini.Sizer.tagSize(2) +
                        jp.co.panpanini.Sizer.int32Size(value)
            }
            protoSize += unknownFields.entries.sumBy { it.value.size() }
            return protoSize
        }

        fun OtherThingsEntry.protoMarshalImpl(protoMarshal: Marshaller) {
            if (key != DEFAULT_KEY) {
                protoMarshal.writeTag(10).writeString(key)

            }
            if (value != DEFAULT_VALUE) {
                protoMarshal.writeTag(16).writeInt32(value)

            }
            if (unknownFields.isNotEmpty()) {
                protoMarshal.writeUnknownFields(unknownFields)
            }
        }

        fun OtherThingsEntry.protoMergeImpl(other: OtherThingsEntry?): OtherThingsEntry =
                other?.copy(
            unknownFields = unknownFields + other.unknownFields
        ) ?: this

        override fun protoMarshal(marshaller: Marshaller) = protoMarshalImpl(marshaller)

        override operator fun plus(other: OtherThingsEntry?): OtherThingsEntry =
                protoMergeImpl(other)

        fun encode(): ByteArray = protoMarshal()

        override fun protoUnmarshal(protoUnmarshal: Unmarshaller): OtherThingsEntry =
                Companion.protoUnmarshal(protoUnmarshal)

        companion object : Message.Companion<OtherThingsEntry> {
            @JvmField
            val DEFAULT_KEY: String = ""

            @JvmField
            val DEFAULT_VALUE: Int = 0

            override fun protoUnmarshal(protoUnmarshal: Unmarshaller): OtherThingsEntry {
                var key = ""
                var value = 0
                while (true) {
                    when (protoUnmarshal.readTag()) {
                        0 -> return OtherThingsEntry(key, value, protoUnmarshal.unknownFields())
                        10 -> key = protoUnmarshal.readString()
                        16 -> value = protoUnmarshal.readInt32()
                        else -> protoUnmarshal.unknownField()
                    }
                }
            }

            @JvmStatic
            fun decode(arr: ByteArray): OtherThingsEntry = protoUnmarshal(arr)
        }
    }

    companion object : Message.Companion<Mappy> {
        @JvmField
        val DEFAULT_ID: String = ""

        @JvmField
        val DEFAULT_THINGS: Map<String, api.Thing> = emptyMap()

        @JvmField
        val DEFAULT_OTHER_THINGS: Map<String, Int> = emptyMap()

        @JvmField
        val DEFAULT_THING_LIST: List<api.Thing> = emptyList()

        override fun protoUnmarshal(protoUnmarshal: Unmarshaller): Mappy {
            var id = ""
            var things: Map<String, api.Thing> = emptyMap()
            var otherThings: Map<String, Int> = emptyMap()
            var thingList: List<api.Thing> = emptyList()
            while (true) {
                when (protoUnmarshal.readTag()) {
                    0 -> return Mappy(id, HashMap(things), HashMap(otherThings),
                            thingList, protoUnmarshal.unknownFields())
                    10 -> id = protoUnmarshal.readString()
                    18 -> things = protoUnmarshal.readMap(things, api.Mappy.ThingsEntry.Companion,
                            true)
                    26 -> otherThings = protoUnmarshal.readMap(otherThings,
                            api.Mappy.OtherThingsEntry.Companion, true)
                    34 -> thingList = protoUnmarshal.readRepeatedMessage(thingList,
                            api.Thing.Companion, true)
                    else -> protoUnmarshal.unknownField()
                }
            }
        }

        @JvmStatic
        fun decode(arr: ByteArray): Mappy = protoUnmarshal(arr)
    }

    class Builder {
        var id: String = DEFAULT_ID

        var things: Map<String, api.Thing> = DEFAULT_THINGS

        var otherThings: Map<String, Int> = DEFAULT_OTHER_THINGS

        var thingList: List<api.Thing> = DEFAULT_THING_LIST

        var unknownFields: Map<Int, UnknownField> = emptyMap()

        fun id(id: String?): Builder {
            this.id = id ?: DEFAULT_ID
            return this
        }

        fun things(things: Map<String, api.Thing>?): Builder {
            this.things = things ?: DEFAULT_THINGS
            return this
        }

        fun otherThings(otherThings: Map<String, Int>?): Builder {
            this.otherThings = otherThings ?: DEFAULT_OTHER_THINGS
            return this
        }

        fun thingList(thingList: List<api.Thing>?): Builder {
            this.thingList = thingList ?: DEFAULT_THING_LIST
            return this
        }

        fun unknownFields(unknownFields: Map<Int, UnknownField>): Builder {
            this.unknownFields = unknownFields
            return this
        }

        fun build(): Mappy = Mappy(id, things, otherThings, thingList, unknownFields)
    }
}
